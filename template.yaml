AWSTemplateFormatVersion: 2010-09-09
Resources:

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  GetFriendImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: get-friend-image-functions
        S3Key: GetFriendImageFunctionCode
      Description: Get a random image of Jordan
      FunctionName: GetFriendImageFunction
      Handler: GetFriendImage::GetFriendImage.Function::FunctionHandlerAsync
      Role: !GetAtt GetFriendImageFunctionRole.Arn
      Runtime: dotnet6
      Timeout: 60

  GetFriendImageUploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: get-friend-image-functions
        S3Key: GetFriendImageUploadFunctionCode
      Description: Upload the data to the database and S3
      FunctionName: GetFriendImageUploadFunction
      Handler: GetFriendImageUplaodFunction::GetFriendImageUploadFunction.Function::FunctionHandlerAsync
      Role: !GetAtt GetFriendImageFunctionRole.Arn
      Runtime: dotnet6
      Timeout: 60

  BotuaFriendTimeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: get-friend-image-functions
        S3Key: BotuaFriendTimeFunctionFunctionCode
      Description: Store data in the time table
      FunctionName: BotuaFriendTimeFunction
      Handler: BotuaFriendTime::BotuaFriendTime.Function::FunctionHandlerAsync
      Role: !GetAtt GetFriendImageFunctionRole.Arn
      Runtime: dotnet6
      Timeout: 60

  BotuaGetFriendTimesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: get-friend-image-functions
        S3Key: BotuaGetFriendTimesFunctionFunctionCode
      Description: Get data from the time table
      FunctionName: BotuaGetFriendTimesFunction
      Handler: BotuaGetFriendTimes::BotuaGetFriendTimes.Function::FunctionHandlerAsync
      Role: !GetAtt GetFriendImageFunctionRole.Arn
      Runtime: dotnet6
      Timeout: 60

  BotuaEC2ServerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: get-friend-image-functions
        S3Key: BotuaEC2ServerFunctionFunctionCode
      Description: Start an EC2 server for specified game
      FunctionName: BotuaEC2ServerFunction
      Handler: BotuaEC2Server::BotuaEC2Server.Function::FunctionHandlerAsync
      Role: !GetAtt GetFriendImageFunctionRole.Arn
      Runtime: dotnet6
      Timeout: 60
  
  BotuaEC2StopServerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: get-friend-image-functions
        S3Key: BotuaStopEC2ServerFunctionFunctionCode
      Description: Stop an EC2 server for specified game
      FunctionName: BotuaStopEC2ServerFunction
      Handler: BotuaStopEC2Server::BotuaStopEC2Server.Function::FunctionHandlerAsync
      Role: !GetAtt GetFriendImageFunctionRole.Arn
      Runtime: dotnet6
      Timeout: 60

  BotuaEventStopEC2ServerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: get-friend-image-functions
        S3Key: BotuaEventStopEC2ServerFunctionFunctionCode
      Description: Check if the EC2 server should be stopped on save event
      FunctionName: BotuaEventStopEC2ServerFunction
      Handler: BotuaEventStopEC2Server::BotuaEventStopEC2Server.Function::FunctionHandler
      Role: !GetAtt GetFriendImageFunctionRole.Arn
      Runtime: dotnet6
      Timeout: 30

  GetFriendImageApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: GetFriendImageFunction
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  GetFriendImageApiUploadPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: GetFriendImageUploadFunction
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  BotuaFriendTimeApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: BotuaFriendTimeFunction
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  BotuaGetFriendTimesApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: BotuaGetFriendTimesFunction
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  BotuaEC2ServerPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: BotuaEC2ServerFunction
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  BotuaStopEC2ServerPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: BotuaStopEC2ServerFunction
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  BotuaEventStopEC2ServerPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: BotuaEventStopEC2ServerFunction
      Principal: 's3.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  GetFriendImageRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: "An API for getting images from S3 with a lambda"
      Name: GetFriendImageRestApi
      EndpointConfiguration:
        Types:
          - EDGE
          
  GetFriendImageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GetFriendImageRestApi.RootResourceId
      PathPart: 'lambda'
      RestApiId: !Ref GetFriendImageRestApi

  GetFriendImageUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GetFriendImageRestApi.RootResourceId
      PathPart: 'upload'
      RestApiId: !Ref GetFriendImageRestApi

  BotuaFriendTimeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GetFriendImageRestApi.RootResourceId
      PathPart: 'time'
      RestApiId: !Ref GetFriendImageRestApi

  BotuaGetFriendTimesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GetFriendImageRestApi.RootResourceId
      PathPart: 'get-time'
      RestApiId: !Ref GetFriendImageRestApi

  BotuaEC2ServerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GetFriendImageRestApi.RootResourceId
      PathPart: 'game-server'
      RestApiId: !Ref GetFriendImageRestApi

  BotuaStopEC2ServerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GetFriendImageRestApi.RootResourceId
      PathPart: 'stop-game-server'
      RestApiId: !Ref GetFriendImageRestApi

  GetFriendImageApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt GetFriendImageApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFriendImageFunction.Arn}/invocations'
      ResourceId: !Ref GetFriendImageResource
      RestApiId: !Ref GetFriendImageRestApi

  GetFriendImageApuGatewayUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt GetFriendImageApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFriendImageUploadFunction.Arn}/invocations'
      ResourceId: !Ref GetFriendImageUploadResource
      RestApiId: !Ref GetFriendImageRestApi

  BotuaFriendTimeApiGatewayUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt GetFriendImageApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BotuaFriendTimeFunction.Arn}/invocations'
      ResourceId: !Ref BotuaFriendTimeResource
      RestApiId: !Ref GetFriendImageRestApi
  
  
  BotuaGetFriendTimesApiGatewayUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt GetFriendImageApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BotuaGetFriendTimesFunction.Arn}/invocations'
      ResourceId: !Ref BotuaGetFriendTimesResource
      RestApiId: !Ref GetFriendImageRestApi

  BotuaEC2ServerApiGatewayUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt GetFriendImageApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BotuaEC2ServerFunction.Arn}/invocations'
      ResourceId: !Ref BotuaEC2ServerResource
      RestApiId: !Ref GetFriendImageRestApi

  BotuaStopEC2ServerApiGatewayUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt GetFriendImageApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BotuaEC2StopServerFunction.Arn}/invocations'
      ResourceId: !Ref BotuaStopEC2ServerResource
      RestApiId: !Ref GetFriendImageRestApi

  GetFriendImageApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref GetFriendImageRestApi
      Schema: {}

  GetFriendImageApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref GetFriendImageApiGatewayDeployment
      RestApiId: !Ref GetFriendImageRestApi
      StageName: 'v0'

  GetFriendImageApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: GetFriendImageApiGatewayMethod
    Properties:
      Description: Random friend image API deployment
      RestApiId: !Ref GetFriendImageRestApi

  GetFriendImageApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: 
                  - !GetAtt GetFriendImageFunction.Arn
                  - !GetAtt GetFriendImageUploadFunction.Arn
                  - !GetAtt BotuaGetFriendTimesFunction.Arn
                  - !GetAtt BotuaFriendTimeFunction.Arn
                  - !GetAtt BotuaEC2ServerFunction.Arn
                  - !GetAtt BotuaEC2StopServerFunction.Arn

  FriendImageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "ImageId"
          AttributeType: "S"
      BillingMode: PROVISIONED
      KeySchema:
        -
          AttributeName: "ImageId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "FriendImageTable"

  FriendTimeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "SessionGuid"
          AttributeType: "S"
      BillingMode: PROVISIONED
      KeySchema:
        -
          AttributeName: "SessionGuid"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "FriendTimeTable"

  FriendMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "server_name"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        -
          AttributeName: "server_name"
          KeyType: "HASH"
      TableName: "FriendMetadataTable"

  GetFriendImageFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM role for the friends image functions
      Path: /
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: ReadWriteTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                Resource: 
                  - 'arn:aws:dynamodb:*:*:table/FriendImageTable'
                  - 'arn:aws:dynamodb:*:*:table/FriendTimeTable'
                  - 'arn:aws:dynamodb:*:*:table/FriendMetadataTable'
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource:
                  - 'arn:aws:s3:::exchange-data-raw'
                  - 'arn:aws:s3:::Exchange-data-raw/*'
                  - 'arn:aws:s3:::generic-images/*'
                  - 'arn:aws:s3:::joshua-game-hosting/*'
                  - 'arn:aws:s3:::joshua-game-backup/*'
        - PolicyName: ApiGatewayPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: '*'
        - PolicyName: SSMFullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource: '*'
        - PolicyName: StartEC2Server
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - ec2:DescribeInstances
                  - ec2:DeleteTags
                  - ec2:CreateTags
                  - ec2:RunInstances
                Resource: '*'