AWSTemplateFormatVersion: 2010-09-09
Resources:

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      

  GetFriendImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: get-friend-image-functions
        S3Key: GetFriendImageFunctionCode
      Description: Get a random image of Jordan
      FunctionName: GetFriendImageFunction
      Handler: GetFriendImage::GetFriendImage.Function::FunctionHandlerAsync
      Role: !GetAtt GetFriendImageFunctionRole.Arn
      Runtime: dotnetcore3.1
      Timeout: 60

  GetFriendImageUploadFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: get-friend-image-functions
        S3Key: GetFriendImageUploadFunctionCode
      Description: Upload the data to the database and S3
      FunctionName: GetFriendImageUploadFunction
      Handler: GetFriendImageUplaodFunction::GetFriendImageUploadFunction.Function::FunctionHandlerAsync
      Role: !GetAtt GetFriendImageFunctionRole.Arn
      Runtime: dotnetcore3.1
      Timeout: 60

  BotuaFriendTimeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: get-friend-image-functions
        S3Key: BotuaFriendTimeFunctionFunctionCode
      Description: Store data in the time table
      FunctionName: BotuaFriendTimeFunction
      Handler: BotuaFriendTime::BotuaFriendTime.Function::FunctionHandlerAsync
      Role: !GetAtt GetFriendImageFunctionRole.Arn
      Runtime: dotnetcore3.1
      Timeout: 60


  BotuaGetFriendTimesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: get-friend-image-functions
        S3Key: BotuaGetFriendTimesFunctionFunctionCode
      Description: Get data from the time table
      FunctionName: BotuaGetFriendTimesFunction
      Handler: BotuaGetFriendTimes::BotuaGetFriendTimes.Function::FunctionHandlerAsync
      Role: !GetAtt GetFriendImageFunctionRole.Arn
      Runtime: dotnetcore3.1
      Timeout: 60

  GetFriendImageApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: GetFriendImageFunction
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  GetFriendImageApiUploadPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: GetFriendImageUploadFunction
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  BotuaFriendTimeApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: BotuaFriendTimeFunction
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  BotuaGetFriendTimesApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: BotuaGetFriendTimesFunction
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  GetFriendImageRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: "An API for getting images from S3 with a lambda"
      Name: GetFriendImageRestApi
      EndpointConfiguration:
        Types:
          - EDGE
          
  GetFriendImageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GetFriendImageRestApi.RootResourceId
      PathPart: 'lambda'
      RestApiId: !Ref GetFriendImageRestApi

  GetFriendImageUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GetFriendImageRestApi.RootResourceId
      PathPart: 'upload'
      RestApiId: !Ref GetFriendImageRestApi

  BotuaFriendTimeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GetFriendImageRestApi.RootResourceId
      PathPart: 'time'
      RestApiId: !Ref GetFriendImageRestApi

  BotuaGetFriendTimesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GetFriendImageRestApi.RootResourceId
      PathPart: 'get-time'
      RestApiId: !Ref GetFriendImageRestApi

  GetFriendImageApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt GetFriendImageApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFriendImageFunction.Arn}/invocations'
      ResourceId: !Ref GetFriendImageResource
      RestApiId: !Ref GetFriendImageRestApi

  GetFriendImageApuGatewayUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt GetFriendImageApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFriendImageUploadFunction.Arn}/invocations'
      ResourceId: !Ref GetFriendImageUploadResource
      RestApiId: !Ref GetFriendImageRestApi

  BotuaFriendTimeApiGatewayUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt GetFriendImageApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BotuaFriendTimeFunction.Arn}/invocations'
      ResourceId: !Ref BotuaFriendTimeResource
      RestApiId: !Ref GetFriendImageRestApi
  
  
  BotuaGetFriendTimesApiGatewayUploadMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt GetFriendImageApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BotuaGetFriendTimesFunction.Arn}/invocations'
      ResourceId: !Ref BotuaGetFriendTimesResource
      RestApiId: !Ref GetFriendImageRestApi

  GetFriendImageApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref GetFriendImageRestApi
      Schema: {}

  GetFriendImageApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref GetFriendImageApiGatewayDeployment
      RestApiId: !Ref GetFriendImageRestApi
      StageName: 'v0'

  GetFriendImageApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: GetFriendImageApiGatewayMethod
    Properties:
      Description: Random friend image API deployment
      RestApiId: !Ref GetFriendImageRestApi

  GetFriendImageApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: 
                  - !GetAtt GetFriendImageFunction.Arn
                  - !GetAtt GetFriendImageUploadFunction.Arn
                  - !GetAtt BotuaGetFriendTimesFunction.Arn
                  - !GetAtt BotuaFriendTimeFunction.Arn

  FriendImageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "ImageId"
          AttributeType: "S"
      BillingMode: PROVISIONED
      KeySchema:
        -
          AttributeName: "ImageId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "FriendImageTable"

  FriendTimeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "UserId"
          AttributeType: "S"
      BillingMode: PROVISIONED
      KeySchema:
        -
          AttributeName: "UserId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "FriendTimeTable"

  GetFriendImageFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM role for the friends image functions
      Path: /
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: ReadWriteTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                Resource: 
                  - 'arn:aws:dynamodb:*:*:table/FriendImageTable'
                  - 'arn:aws:dynamodb:*:*:table/FriendTimeTable'
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource:
                  - 'arn:aws:s3:::exchange-data-raw'
                  - 'arn:aws:s3:::Exchange-data-raw/*'
                  - 'arn:aws:s3:::generic-images/*'
        - PolicyName: ApiGatewayPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: '*'