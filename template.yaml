AWSTemplateFormatVersion: 2010-09-09
Resources:

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      

  AdventuresOfWilburRandomImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: adventures-of-wilbur-functions
        S3Key: AdventuresOfWilburRandomImageFunctionCode
      Description: Get a random image of Wilbur
      FunctionName: AdventuresOfWilburRandomImageFunction
      Handler: AdventuresOfWilbur::AdventuresOfWilbur.Function::FunctionHandlerAsync
      Role: !GetAtt AdventuresOfWilburFunctionRole.Arn
      Runtime: dotnetcore3.1
      Timeout: 60

  # AdventuresOfWilburRandomImageFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Code:
  #       S3Bucket: adventures-of-wilbur-functions
  #       S3Key: AdventuresOfWilburRandomImageFunctionCode
  #     Description: Get a random image of Wilbur
  #     FunctionName: AdventuresOfWilburRandomImageFunction
  #     Handler: AdventuresOfWilburRandomImageFunction::AdventuresOfWilburRandomImageFunction.Function:Get
  #     Role:
  #       Fn::GetAtt:
  #         - AdventuresOfWilburFunctionRole
  #         - Arn
  #     Runtime: dotnetcore3.1

  AdventuresOfWilburApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: AdventuresOfWilburRandomImageFunction
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  AdventuresOfWilburRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: "An API for getting images from S3 with a lambda"
      Name: AdventuresOfWilburRestApi
      EndpointConfiguration:
        Types:
          - EDGE
          
  AdventuresOfWilburResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt AdventuresOfWilburRestApi.RootResourceId
      PathPart: 'lambda'
      RestApiId: !Ref AdventuresOfWilburRestApi

  AdventuresOfWilburApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt AdventuresOfWilburApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AdventuresOfWilburRandomImageFunction.Arn}/invocations'
      ResourceId: !Ref AdventuresOfWilburResource
      RestApiId: !Ref AdventuresOfWilburRestApi

  AdventuresOfWilburApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref AdventuresOfWilburRestApi
      Schema: {}

  AdventuresOfWilburApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref AdventuresOfWilburApiGatewayDeployment
      RestApiId: !Ref AdventuresOfWilburRestApi
      StageName: 'v0'

  AdventuresOfWilburApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: AdventuresOfWilburApiGatewayMethod
    Properties:
      Description: Adventures of Wilbur API deployment
      RestApiId: !Ref AdventuresOfWilburRestApi


  AdventuresOfWilburApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: !GetAtt AdventuresOfWilburRandomImageFunction.Arn


  AdventuresOfWilburImageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "ImageId"
          AttributeType: "N"
      BillingMode: PROVISIONED
      KeySchema:
        -
          AttributeName: "ImageId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "AdventuresOfWilburImageTable"

  AdventuresOfWilburImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: adventures-of-wilbur-images
    DeletionPolicy: Retain

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: adventures-of-wilbur-images
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: "Allow"
            Principal: "*"
            Resource: "arn:aws:s3:::adventures-of-wilbur-images/*"

  AdventuresOfWilburFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM role for the adventures of Wilbur image functions
      Path: /
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: ReadWriteTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                Resource: 
                  - 'arn:aws:dynamodb:*:*:table/AdventuresOfWilburImageTable'
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource:
                  - 'arn:aws:s3:::exchange-data-raw'
                  - 'arn:aws:s3:::Exchange-data-raw/*'
        - PolicyName: ApiGatewayPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: '*'
